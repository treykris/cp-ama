1. 
a) 1 2
b) 0
c) 1
d) 0

2.  -(num/num) will always provide the same result. 
    (-num)/num changes the value depending on if standard c89 
    is used and what implementation the compiler uses.

3. 
a) 1
b) -1 or -2
c) -1 or -2
d) 1 or 2

4.
a) 1
b) -1
c) -1
d) 1


5.
a) 3
b) -3 or 2
c) -3 or 2
d) 3

6.
a) 3
b) -3
c) -3
d) 3


7. 
Original: 9 - (total - 1) % 10
Simplified: 10 - total % 10
- That yields in a different result because the order of operations are important in the initial algorithm.

8. The experssion would not work if replaced with the (10 - (total % 10)) % 10.

9. 
a) 63 8
b) 3 2 1  
c) 2 -1 3
d) 0 0 0


10. 
a) 6 6
b) 3 4
c) 2 8
d) 6 9


11. 
a) 0 2
b) 4 11 6
c) 0 8 7
d) 3 4 5 4

12.
a) 5 16
b) 6 -7
c) 6 27
d) 6 42


13. ++i is equivalent to (i += 1) because the expression is evaulated and immediately assigned to i.

14. 
a) (((a * b) - (c * d)) + e)
b) (((a / b) % c) / d)
c) ((((- a) - b) + c) - (+ d))
d) (((a * (- b)) / c) - d)


15. 
a) 3 2
b) 0 2
c) 1 2
d) 1 3
 

